#coding: utf-8
import telebot
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
import json
import requests
import threading
import time
import smtplib
from credentials import *
import random
# import subprocess
import datetime


bot = telebot.TeleBot(TOKEN)
admin = [1471099925]

TEST = True
RUN = True  # —á–µ–∫–µ—Ä —Å—Ç–∞—Ç–µ–π


def j_open(name):
    with open(name, mode="r",encoding='utf8') as json_file:
        return json.load(json_file)

def j_save(name, var):
    with open(name, 'w', encoding='utf8') as json_file:
        json.dump(var, json_file, ensure_ascii=False)


# state = j_open('state.json')
available_events = j_open('availableEvents.json')
new_events = []


print(repr(available_events))

class State():
    def __init__(self) -> None:
        self.state_file = 'state.json'
        self.state = j_open(self.state_file)

    def __saveState(self):
        j_save(self.state_file, self.state)

    def dropState(self, call):
        self.state[str(call.from_user.id)] = {"state": '', "data":[]}
        self.__saveState()

    def setState(self, call, msg):
        """ –†–∞–±–æ—Ç–∞ —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ """
        try: self.state[str(call.from_user.id)]['state'] = msg
        except: self.dropState(call)
        self.__saveState()

    def getState(self, call):
        try:
            return self.state[str(call.from_user.id)]['state']
        except:
            self.dropState(call)
            return self.state[str(call.from_user.id)]['state']


    def setData(self, call, data):
        self.state[str(call.from_user.id)]['data'] = data
        self.__saveState()

    def getData(self, call):
        return self.state[str(call.from_user.id)]['data']

    def updateData(self, call, item):
        self.state[str(call.from_user.id)]['data'].append(item)
        self.__saveState()

state = State()

def admin_auth(func):
    """ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ """
    def wrapper(message):
        admins = request_(f'{server}/request?key={access_key}&type=getadmin')
        if admins != 'request error': 
            if str(message.chat.id) in admins:
                return func(message)
    return wrapper


@bot.message_handler(commands=['myid'])
def welcome_start(message):
    """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º """
    bot.send_message(message.from_user.id, message.from_user.id)

@bot.message_handler(commands=['help'])
def help_func(message):
    """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º """
    text = """
*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*    
/events - —Å–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π

–ù–∞—à–ª–∏ –æ—à–∏–±–∫—É?
/report <–û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏>
    
"""
    bot.send_message(message.from_user.id, text, parse_mode='Markdown')

@bot.message_handler(commands=['report'])
def welcome_start(message):
    bot.send_message(admin[0], message.text)



@bot.message_handler(commands=['say'])
@admin_auth
def say(message):
    print(message.text)
    text = message.text.replace('/say ', '')
    id_list = request_(f'{server}/request?key={access_key}&type=getmailing')

    for i in id_list:
        try: bot.send_message(i, text)
        except: pass

    

def request_(url):
    """ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∫–≤–µ—Å—Ç–æ–≤ """
    try: 
        return json.loads(requests.get(url).content.decode("utf-8"))
    except:
        print(f'{datetime.datetime.now()} –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å: {url}')
        return 'request error'

def sendEvent(user_id, event):
    """ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–≤–µ–Ω—Ç """
    user = request_(f'{server}/request?key={access_key}&type=getuser&tgId={user_id}')
    event = request_(f'{server}/request?key={access_key}&type=getevent&eventId={event["id"]}')
    
    nco = ''
    if event['nco'] == True: nco = "–î–æ—Å—Ç—É–ø: –¢–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ù–°–û"
    else: nco = "–î–æ—Å—Ç—É–ø: –î–ª—è –≤—Å–µ—Ö –∂–µ–ª–∞—é—â–∏—Ö"

    text = f"*{event['title']}*\n\n{event['text']}\n\n{nco}"
    keyboard = InlineKeyboardMarkup()
    
    if user['code'] in event['members']: keyboard.add(InlineKeyboardButton(text="–í—ã –ø—Ä–∏–Ω—è–ª–∏ —É—á–∞—Å—Ç–∏–µ ‚úÖ", callback_data="0"))
    elif event['closed'] == False: keyboard.add(InlineKeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ ‚ùå", callback_data="0"))
    else: keyboard.add(InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ üìù", callback_data=f"accept {event['id']}"))
    try: bot.send_message(user_id, text, reply_markup=keyboard, parse_mode='Markdown')
    except: print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")


def sendEvents(user_id):
    """ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –∏–≤–µ–Ω—Ç—ã """
    user = request_(f'{server}/request?key={access_key}&type=getuser&tgId={str(user_id)}')
    if user == 'request error': 
        bot.send_message(user_id, "–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω.")
        return

    if user == None: return

    if user['deactivated'] == True:
        bot.send_message(user_id, "–í—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    for i in available_events:
        sendEvent(user_id, i)


@bot.message_handler(commands=['events'])
def welcome_start(message):
    """ –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π """
    sendEvents(message.from_user.id)

# @bot.message_handler(commands=['myevents'])
# def welcome_start(message):
#     """ –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π  –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """
#     sendEvents(message.from_user.id)

def massMailing(event):
    """ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∏–≤–µ–Ω—Ç–∞ """
    id_list = request_(f'{server}/request?key={access_key}&type=getmailing')
    if id_list == 'request error': return
    for i in id_list:
        sendEvent(i, event)

def deleteMessages(call):
    data = state.getData(call)
    for i in data:
        try: bot.delete_message(call.from_user.id, i)
        except: print('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è')
    state.setData(call, [])
    

@bot.message_handler(commands=['start'])
def welcome_start(message):
    """ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç """
    user = request_(f'{server}/request?key={access_key}&type=getuser&tgId={str(message.from_user.id)}')
    if user == 'request error': 
        bot.send_message(message.from_user.id, "–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        return

    state.dropState(message)
    if user == None:
        bot.send_message(message.from_user.id, '–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞:')
        state.setState(message, 'verify waiting')

    else:
        state.dropState(message) 
        sendEvents(message.from_user.id)

def sendVerifyCode(email):
    """ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç none –∏–ª–∏ –∫–æ–¥"""
    try:
        code = random.randint(1000, 9999)
        to_email = email
        text = f'%s %s' % ('Your verification code', str(code))
        text = text.encode('ascii')

        smtpserver = smtplib.SMTP("smtp.gmail.com", 587)
        smtpserver.ehlo()
        smtpserver.starttls()
        smtpserver.ehlo()
        smtpserver.login(username, password)
        smtpserver.sendmail(username, [to_email], text)
        return code

    except: return None

@bot.message_handler(content_types=['text'])
def send_text(message):
    """ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ """
    tgid = str(message.from_user.id)
    if state.getState(message) == 'verify waiting':
        ticket = message.text
        check = request_(f'{server}/request?key={access_key}&type=checkticket&ticket={ticket}')
        if check == True:
            email = request_(f'{server}/request?key={access_key}&type=getemailbyticket&ticket={ticket}')
            state.setState(message, f'waiting code {message.text} {email}')
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥", callback_data="waiting code changetg"))
            keyboard.add(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="abort"))
            text = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –¥–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.\n'
            text1 = '–ß—Ç–æ–±—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –Ω–∞ –¥–∞–Ω–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º –∞–∫–∫–∞—É–Ω—Ç, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∞—à email'
            msg = bot.send_message(message.from_user.id, text=text+text1, reply_markup=keyboard)
            state.updateData(message, msg.id)
            return

        status = request_(f'{server}/request?key={access_key}&type=verify&ticket={ticket}&tgId={tgid}&addnco=0')[0]
        # name = request_(f'{server}/request?key={access_key}&type=getusername&ticket={ticket}')

        if status[0] == 'user not in nco': # –û–¢–ö–õ–Æ–ß–ï–ù–ê –ù–ê –°–ï–†–í–ï–†–ï
            bot.send_message(message.from_user.id, f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:')
            sendEvents(message.from_user.id)
            # name = request_(f'{server}/request?key={access_key}&type=getusername&ticket={ticket}')
            state.setState(message, f'waiting code {message.text} {status[1]}')
            text = f'–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –Ω–∞—É—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.\n'
            text1 = '–î–ª—è —É—á–∞—Å—Ç–∏—è, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–∞ –≤–∞—à email.'
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥", callback_data="waiting code"))
            keyboard.add(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="abort"))
            msg = bot.send_message(message.from_user.id, text+text1, reply_markup=keyboard)
            state.updateData(message, msg.id)

        elif status[0] == 'verify complete':
            bot.send_message(message.from_user.id, f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:')
            sendEvents(message.from_user.id)
        
        elif status[0] == 'user not found':
            text = "–î–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. \n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –¥–µ–∫–∞–Ω–∞—Ç."
            bot.send_message(message.from_user.id, text)

    elif state.getState(message).startswith('waiting code'):
        if state.getState(message).split(' ')[-1] == message.text:
            ticket = state.getState(message).split(' ')[2]
            # name = request_(f'{server}/request?key={access_key}&type=getusername&ticket={ticket}')

            status = request_(f'{server}/request?key={access_key}&type=verify&ticket={ticket}&tgId={tgid}&addnco=1')[0]
            bot.send_message(message.from_user.id, f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:')
            sendEvents(message.from_user.id)
            state.dropState(message)

        else: bot.send_message(message.from_user.id, '–ù–µ –≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')


    elif state.getState(message).startswith('waiting code changetg'):
        if state.getState(message).split(' ')[-1] == message.text:
            ticket = state.getState(message).split(' ')[2]
            # name = request_(f'{server}/request?key={access_key}&type=getusername&ticket={ticket}')
            status = request_(f'{server}/request?key={access_key}&type=verify&ticket={ticket}&tgId={tgid}&addnco=0')[0]
            bot.send_message(message.from_user.id, f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:')
            sendEvents(message.from_user.id)
            state.dropState(message)

        else: bot.send_message(message.from_user.id, '–ù–µ –≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')



@bot.callback_query_handler(func=lambda call: True)
def query_handler(callback):
    """ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É """
    if callback.data.startswith('abort'):
        deleteMessages(callback)
        state.dropState(callback)

    elif callback.data.startswith('accept'):
        event_id = callback.data.split(' ')[-1]
        event = request_(f'{server}/request?key={access_key}&type=getevent&eventId={event_id}')
        
        if event == 'request error': 
            bot.send_message(callback.from_user.id, "–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return


        if (event != None) and (event == 'event not exist') or (event['closed'] == False):
            bot.send_message(callback.from_user.id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –¥–∞–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞.")
            state.setState(callback, '')
            return

        user = request_(f'{server}/request?key={access_key}&type=getuser&tgId={callback.from_user.id}')
        if (user['nco'] == False) and (event['nco'] == True):
            user = request_(f'{server}/request?key={access_key}&type=getuser&tgId={callback.from_user.id}')
            state.setState(callback, f'waiting code {user["code"]} {user["email"]}')

            text = f'–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –Ω–∞—É—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.\n'
            text1 = '–ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–∞ –≤–∞—à email.'
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥", callback_data="waiting code"))
            keyboard.add(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="abort"))
            msg = bot.send_message(callback.from_user.id, text+text1, reply_markup=keyboard)
            state.updateData(callback, msg.id)
            return

        text = f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∂–µ–ª–∞–Ω–∏–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ \"{event['title']}\""
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="regme"))
        keyboard.add(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="abort"))
        msg = bot.send_message(callback.from_user.id, text, reply_markup=keyboard)
        state.updateData(callback, msg.id)
        state.setState(callback, f"waiting accept {event_id}")


    elif state.getState(callback).startswith('waiting accept') and callback.data == 'regme':
        deleteMessages(callback)
        user_id = callback.from_user.id
        event_id = state.getState(callback).split(' ')[-1]
        event = request_(f'{server}/request?key={access_key}&type=getevent&eventId={event_id}')
        data = request_(f'{server}/request?key={access_key}&type=acceptevent&event_id={event_id}&user_id={user_id}')
        bot.send_message(callback.from_user.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ —Å–æ–±—ã—Ç–∏–µ \"{event['title']}\"")


    elif state.getState(callback).startswith('waiting code'):
        deleteMessages(callback)
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥", callback_data="waiting code"))
        msg = bot.send_message(callback.from_user.id, '–û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞. –ï—Å–ª–∏ –∫–æ–¥ –Ω–µ –ø—Ä–∏—à—ë–ª, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É "—Å–ø–∞–º" –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É', reply_markup=keyboard)
        state.updateData(callback, msg.id)

        
        stat = state.getState(callback)
        email = stat.split(' ')[3]
        code = sendVerifyCode(email)
        if code != None: state.setState(callback, f'{stat} {code}')   
        else: bot.send_message(callback.from_user.id, "–û—à–∏–±–∫–∞ –ø–æ—á—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞. –ö–æ–¥ –Ω–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")



def runBot():
    # global RUN
    """ –°—Ç–∞—Ä—Ç –ø—É–ª–ª–∏–Ω–≥–∞ """
    # try: 
    bot.polling(none_stop=True) #–∑–∞–ø—É—Å–∫
    # except: RUN = False
    # finally: subprocess.Popen(['python3.9', 'Bot.py', '&'])



def runEventScheduler():
    """ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ """
    global available_events
    while RUN:
        time.sleep(5)
        data = request_(f'{server}/request?key={access_key}&type=getarticles')
        if data == "request error": continue
        for i in data:
            if i not in available_events:
                massMailing(i)
        available_events = data
        j_save('availableEvents.json', available_events)
        


if __name__ == "__main__":
    if RUN == False:
        runBot()
    else:
        t1 = threading.Thread(target=runBot)
        t2 = threading.Thread(target=runEventScheduler)
        t1.start() 
        t2.start()


#  –ö–æ—Ä–Ω–µ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
#  –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –º–µ–º–±–µ—Ä–æ–≤ –ù–°–û
#  –£—á–∞—Å—Ç–∏–µ –≤ —Å–æ–±—ã—Ç–∏–∏ –¥–ª—è —é–∑–µ—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
#  –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—Å—ã
#  –ò—Å–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Ä–µ–∫–≤–µ—Å—Ç—ã
#  —Ç–µ—Å—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#  —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
#  –û–±—â–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
#  –ö–æ–º–∞–Ω–¥–∞ —Ö–µ–ª–ø
#  –∫—Ä–µ–¥—Å—ã
#  –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–¥
#  –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ª–∏—Å—Ç
# TODO –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å–µ–º —á–µ—Ä–µ–∑ –º—ã–ª–æ
#  –û—à–∏–±–∫–∞ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
#  –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ events –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
#  –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–¥–∞
#  –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ email –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö
#  –ø–æ–∏—Å–∫ –ø–æ –±–∏–ª–µ—Ç—É –≤ –∞–¥–º–∏–Ω–∫–µ
